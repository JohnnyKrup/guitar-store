{"ast":null,"code":"import { UserActionTypes } from \"./user.types\";\nconst INITIAL_STATE = {\n  currentUser: null\n};\n/**\r\n * state = INITIAL_STATE is a way to set a default value,\r\n * in case state is not passed into the function.\r\n * If null is passed into the function as a first parameter,\r\n * it is considered as a value and the INITAL_STATE will not be used.\r\n *\r\n * action is an object containing a type which is a string\r\n * that will be checked in the switch\r\n * if the value matches we want to return a new object in order to\r\n * trigger the re-render function of the DOM, by just changing the value\r\n * and sending back the same value, the DOM might not be re-rendered.\r\n *\r\n * first thing is to spread all the properties of the state => ...state\r\n * & then as a second argument, update the prop that we really want to update\r\n * by assigning the payload property of the action\r\n * @param {*} state\r\n * @param {*} action\r\n */\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case UserActionTypes.SET_CURRENT_USER:\n      return { ...state,\n        currentUser: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["D:/Coding/GitHub/React/guitar-store/client/src/redux/user/user.reducer.js"],"names":["UserActionTypes","INITIAL_STATE","currentUser","userReducer","state","action","type","SET_CURRENT_USER","payload"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE;AADO,CAAtB;AAIA;;;;;;;;;;;;;;;;;;;AAkBA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,eAAe,CAACO,gBAArB;AACE,aAAO,EACL,GAAGH,KADE;AAELF,QAAAA,WAAW,EAAEG,MAAM,CAACG;AAFf,OAAP;;AAKF;AACE,aAAOJ,KAAP;AARJ;AAUD,CAXD;;AAaA,eAAeD,WAAf","sourcesContent":["import { UserActionTypes } from \"./user.types\"\r\n\r\nconst INITIAL_STATE = {\r\n  currentUser: null,\r\n}\r\n\r\n/**\r\n * state = INITIAL_STATE is a way to set a default value,\r\n * in case state is not passed into the function.\r\n * If null is passed into the function as a first parameter,\r\n * it is considered as a value and the INITAL_STATE will not be used.\r\n *\r\n * action is an object containing a type which is a string\r\n * that will be checked in the switch\r\n * if the value matches we want to return a new object in order to\r\n * trigger the re-render function of the DOM, by just changing the value\r\n * and sending back the same value, the DOM might not be re-rendered.\r\n *\r\n * first thing is to spread all the properties of the state => ...state\r\n * & then as a second argument, update the prop that we really want to update\r\n * by assigning the payload property of the action\r\n * @param {*} state\r\n * @param {*} action\r\n */\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case UserActionTypes.SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default userReducer\r\n"]},"metadata":{},"sourceType":"module"}