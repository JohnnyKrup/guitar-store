{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\GitHub\\\\React\\\\guitar-store\\\\src\\\\components\\\\sign-in\\\\sign-in.component.js\";\nimport React, { useState } from \"react\";\nimport FormInput from \"../form-input/form-input.component\";\nimport \"./sign-in.styles.scss\";\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport { auth, signInWithGoogle } from \"../../firebase/firebase.utils\";\n\nconst SignIn = () => {\n  const [userCredentials, setUserCredentials] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  /**\r\n   * For the sign in process with email and password\r\n   * we need to extend this method and make it async\r\n   * @param {*} event\r\n   */\n\n  const handleSubmit = async event => {\n    /**\r\n     * we want a custom submit handling, that's why we want\r\n     * to prevent the deafult behavior first and then code\r\n     * what we want the submit to do.\r\n     */\n    event.preventDefault();\n    /**\r\n     * For the email and pass sign-in process\r\n     * we need the email and password from this.state\r\n     */\n\n    const {\n      email,\n      password\n    } = userCredentials;\n\n    try {\n      // use the firebase method to sign in, if it does not work catch the error\n      await auth.signInWithEmailAndPassword(email, password); // if it worked, clear the form\n\n      setUserCredentials({\n        email: \"\",\n        password: \"\"\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    /**\r\n     * if the event.target comes from the email field\r\n     * name: email / value: what was typed in into the email field\r\n     * same for password\r\n     *\r\n     * we set the property name dynamically, so that we don't\r\n     * have to write the same code for each input field\r\n     */\n\n    setUserCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Ich habe bereits ein Konto\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Mit Email und Passwort anmelden\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: this.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: this.state.email,\n    handleChange: this.handleChange,\n    label: \"Email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: this.state.password,\n    handleChange: this.handleChange,\n    label: \"Passwort\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"Anmelden\"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: signInWithGoogle,\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"Mit Google anmelden\"))));\n};\n\nexport default SignIn;","map":{"version":3,"sources":["D:/Coding/GitHub/React/guitar-store/src/components/sign-in/sign-in.component.js"],"names":["React","useState","FormInput","CustomButton","auth","signInWithGoogle","SignIn","userCredentials","setUserCredentials","email","password","handleSubmit","event","preventDefault","signInWithEmailAndPassword","error","console","log","handleChange","value","name","target","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAO,uBAAP;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,SAASC,IAAT,EAAeC,gBAAf,QAAuC,+BAAvC;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC;AACrDQ,IAAAA,KAAK,EAAE,EAD8C;AAErDC,IAAAA,QAAQ,EAAE;AAF2C,GAAD,CAAtD;AAKA;;;;;;AAKA,QAAMC,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;;;;;AAKAA,IAAAA,KAAK,CAACC,cAAN;AAEA;;;;;AAIA,UAAM;AAAEJ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBH,eAA5B;;AAEA,QAAI;AACF;AACA,YAAMH,IAAI,CAACU,0BAAL,CAAgCL,KAAhC,EAAuCC,QAAvC,CAAN,CAFE,CAGF;;AACAF,MAAAA,kBAAkB,CAAC;AAAEC,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,QAAQ,EAAE;AAAvB,OAAD,CAAlB;AACD,KALD,CAKE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAtBD;;AAwBA,QAAMG,YAAY,GAAIN,KAAD,IAAW;AAC9B,UAAM;AAAEO,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBR,KAAK,CAACS,MAA9B;AACA;;;;;;;;;AAQAb,IAAAA,kBAAkB,CAAC,EAAE,GAAGD,eAAL;AAAsB,OAACa,IAAD,GAAQD;AAA9B,KAAD,CAAlB;AACD,GAXD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFF,eAIE;AAAM,IAAA,QAAQ,EAAE,KAAKR,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAE,KAAKW,KAAL,CAAWb,KAHpB;AAIE,IAAA,YAAY,EAAE,KAAKS,YAJrB;AAKE,IAAA,KAAK,EAAC,OALR;AAME,IAAA,QAAQ,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eASE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,KAAK,EAAE,KAAKI,KAAL,CAAWZ,QAHpB;AAIE,IAAA,YAAY,EAAE,KAAKQ,YAJrB;AAKE,IAAA,KAAK,EAAC,UALR;AAME,IAAA,QAAQ,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAkBE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAA4B,IAAA,OAAO,EAAEb,gBAArC;AAAuD,IAAA,cAAc,MAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,CAlBF,CAJF,CADF;AAgCD,CAhFD;;AAkFA,eAAeC,MAAf","sourcesContent":["import React, { useState } from \"react\"\r\nimport FormInput from \"../form-input/form-input.component\"\r\nimport \"./sign-in.styles.scss\"\r\nimport CustomButton from \"../custom-button/custom-button.component\"\r\nimport { auth, signInWithGoogle } from \"../../firebase/firebase.utils\"\r\n\r\nconst SignIn = () => {\r\n  const [userCredentials, setUserCredentials] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  })\r\n\r\n  /**\r\n   * For the sign in process with email and password\r\n   * we need to extend this method and make it async\r\n   * @param {*} event\r\n   */\r\n  const handleSubmit = async (event) => {\r\n    /**\r\n     * we want a custom submit handling, that's why we want\r\n     * to prevent the deafult behavior first and then code\r\n     * what we want the submit to do.\r\n     */\r\n    event.preventDefault()\r\n\r\n    /**\r\n     * For the email and pass sign-in process\r\n     * we need the email and password from this.state\r\n     */\r\n    const { email, password } = userCredentials\r\n\r\n    try {\r\n      // use the firebase method to sign in, if it does not work catch the error\r\n      await auth.signInWithEmailAndPassword(email, password)\r\n      // if it worked, clear the form\r\n      setUserCredentials({ email: \"\", password: \"\" })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    const { value, name } = event.target\r\n    /**\r\n     * if the event.target comes from the email field\r\n     * name: email / value: what was typed in into the email field\r\n     * same for password\r\n     *\r\n     * we set the property name dynamically, so that we don't\r\n     * have to write the same code for each input field\r\n     */\r\n    setUserCredentials({ ...userCredentials, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <div className=\"sign-in\">\r\n      <h2>Ich habe bereits ein Konto</h2>\r\n      <span>Mit Email und Passwort anmelden</span>\r\n\r\n      <form onSubmit={this.handleSubmit}>\r\n        <FormInput\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={this.state.email}\r\n          handleChange={this.handleChange}\r\n          label=\"Email\"\r\n          required\r\n        />\r\n        <FormInput\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={this.state.password}\r\n          handleChange={this.handleChange}\r\n          label=\"Passwort\"\r\n          required\r\n        />\r\n\r\n        <div className=\"buttons\">\r\n          <CustomButton type=\"submit\">Anmelden</CustomButton>\r\n          <CustomButton type=\"button\" onClick={signInWithGoogle} isGoogleSignIn>\r\n            Mit Google anmelden\r\n          </CustomButton>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignIn\r\n"]},"metadata":{},"sourceType":"module"}