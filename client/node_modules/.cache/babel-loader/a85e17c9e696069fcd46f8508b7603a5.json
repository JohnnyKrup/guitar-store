{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\GitHub\\\\React\\\\guitar-store\\\\src\\\\pages\\\\shop\\\\shop.component.js\";\nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport Collection from \"../collection/collection.component\";\nimport { firestore, convertCollcetionsSnapshotToMap } from \"../../firebase/firebase.utils\";\n/**\r\n * we have access to the match property because in App.js\r\n * the ShopPage is <Route path=\"/shop\" component={ShopPage} /> passed as\r\n * a Component in a Route and automatically Route passes match / history / location as\r\n * properties to its component\r\n * @param {*} param0\r\n */\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    /**\r\n     * Prepare data from firebase, so that we can use it in our application\r\n     * this way we can get rid of the static data stored in the frontend\r\n     */\n    //const { updateCollections } = this.props\n    const collectionRef = firestore.collection(\"collections\");\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n      // console.log(snapshot)\n      const collectionsMap = convertCollcetionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n    });\n  } // console.log(match)\n\n\n  render() {\n    const {\n      match\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      component: CollectionsOverview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      component: Collection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  collections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["D:/Coding/GitHub/React/guitar-store/src/pages/shop/shop.component.js"],"names":["React","Route","connect","updateCollections","CollectionsOverview","Collection","firestore","convertCollcetionsSnapshotToMap","ShopPage","Component","unsubscribeFromSnapshot","componentDidMount","collectionRef","collection","onSnapshot","snapshot","collectionsMap","render","match","props","path","mapDispatchToProps","dispatch","collections"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AAEA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA;;;;;;;;AAOA,MAAMC,QAAN,SAAuBR,KAAK,CAACS,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,uBADqC,GACX,IADW;AAAA;;AAGrCC,EAAAA,iBAAiB,GAAG;AAClB;;;;AAIA;AACA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AAEA,SAAKH,uBAAL,GAA+BE,aAAa,CAACE,UAAd,CAC7B,MAAOC,QAAP,IAAoB;AAClB;AACA,YAAMC,cAAc,GAAGT,+BAA+B,CAACQ,QAAD,CAAtD;AACAZ,MAAAA,iBAAiB,CAACa,cAAD,CAAjB;AACD,KAL4B,CAA/B;AAOD,GAlBoC,CAoBrC;;;AACAC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAvB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAED,KAAK,CAACE,IAAK,EAAjC;AAAoC,MAAA,SAAS,EAAEhB,mBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEc,KAAK,CAACE,IAAK,gBAA3B;AAA4C,MAAA,SAAS,EAAEf,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AA7BoC;;AAgCvC,MAAMgB,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,WAAW,EAAGP,cAAD,IAAoBM,QAAQ,CAACnB,iBAAiB,CAACa,cAAD,CAAlB;AADD,CAAf,CAA3B;;AAIA,eAAed,OAAO,CAAC,IAAD,EAAOmB,kBAAP,CAAP,CAAkCb,QAAlC,CAAf","sourcesContent":["import React from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\"\r\n\r\nimport { updateCollections } from \"../../redux/shop/shop.actions\"\r\n\r\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\"\r\nimport Collection from \"../collection/collection.component\"\r\n\r\nimport {\r\n  firestore,\r\n  convertCollcetionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\"\r\n\r\n/**\r\n * we have access to the match property because in App.js\r\n * the ShopPage is <Route path=\"/shop\" component={ShopPage} /> passed as\r\n * a Component in a Route and automatically Route passes match / history / location as\r\n * properties to its component\r\n * @param {*} param0\r\n */\r\nclass ShopPage extends React.Component {\r\n  unsubscribeFromSnapshot = null\r\n\r\n  componentDidMount() {\r\n    /**\r\n     * Prepare data from firebase, so that we can use it in our application\r\n     * this way we can get rid of the static data stored in the frontend\r\n     */\r\n    //const { updateCollections } = this.props\r\n    const collectionRef = firestore.collection(\"collections\")\r\n\r\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n      async (snapshot) => {\r\n        // console.log(snapshot)\r\n        const collectionsMap = convertCollcetionsSnapshotToMap(snapshot)\r\n        updateCollections(collectionsMap)\r\n      }\r\n    )\r\n  }\r\n\r\n  // console.log(match)\r\n  render() {\r\n    const { match } = this.props\r\n    return (\r\n      <div className=\"shop-page\">\r\n        <Route exact path={`${match.path}`} component={CollectionsOverview} />\r\n        <Route path={`${match.path}/:collectionId`} component={Collection} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  collections: (collectionsMap) => dispatch(updateCollections(collectionsMap)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage)\r\n"]},"metadata":{},"sourceType":"module"}