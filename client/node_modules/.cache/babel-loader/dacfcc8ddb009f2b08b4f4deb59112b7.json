{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\GitHub\\\\React\\\\guitar-store\\\\src\\\\components\\\\with-spinner\\\\with.spinner.component.jsx\";\nimport React from \"react\";\nimport { SpinnerOverlay, SpinnerContainer } from \"./with-spinner.styles\";\n/**\r\n * We create a new HOC the WithSpinner Component\r\n * it is a function that takes a component as an argument\r\n * The WrappedComponent gets passed into this component\r\n *\r\n * If isLoading === true display the spinner css animation\r\n * If isLoading === false, display the component that was passed in\r\n * @param {*} WrappedComponent\r\n */\n// const WithSpinner = (WrappedComponent) => ({isLoading, ...otherProps}) {\n//   return  isLoading ? (\n//     <SpinnerOverlay>\n//       <SpinnerContainer />\n//     </SpinnerOverlay>\n//   ) : (\n//     <WrappedComponent {...otherProps} />\n//   )\n// }\n\nconst WithSpinner = WrappedComponent => {\n  const Spinner = ({\n    isLoading,\n    ...otherProps\n  }) => {\n    return isLoading ? /*#__PURE__*/React.createElement(SpinnerOverlay, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SpinnerContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({}, otherProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  return Spinner;\n};\n\nexport default WithSpinner;","map":{"version":3,"sources":["D:/Coding/GitHub/React/guitar-store/src/components/with-spinner/with.spinner.component.jsx"],"names":["React","SpinnerOverlay","SpinnerContainer","WithSpinner","WrappedComponent","Spinner","isLoading","otherProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,uBAAjD;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAIC,gBAAD,IAAsB;AACxC,QAAMC,OAAO,GAAG,CAAC;AAAEC,IAAAA,SAAF;AAAa,OAAGC;AAAhB,GAAD,KAAkC;AAChD,WAAOD,SAAS,gBACd,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADc,gBAKd,oBAAC,gBAAD,oBAAsBC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OALF;AAOD,GARD;;AASA,SAAOF,OAAP;AACD,CAXD;;AAaA,eAAeF,WAAf","sourcesContent":["import React from \"react\"\r\n\r\nimport { SpinnerOverlay, SpinnerContainer } from \"./with-spinner.styles\"\r\n\r\n/**\r\n * We create a new HOC the WithSpinner Component\r\n * it is a function that takes a component as an argument\r\n * The WrappedComponent gets passed into this component\r\n *\r\n * If isLoading === true display the spinner css animation\r\n * If isLoading === false, display the component that was passed in\r\n * @param {*} WrappedComponent\r\n */\r\n// const WithSpinner = (WrappedComponent) => ({isLoading, ...otherProps}) {\r\n//   return  isLoading ? (\r\n//     <SpinnerOverlay>\r\n//       <SpinnerContainer />\r\n//     </SpinnerOverlay>\r\n//   ) : (\r\n//     <WrappedComponent {...otherProps} />\r\n//   )\r\n// }\r\n\r\nconst WithSpinner = (WrappedComponent) => {\r\n  const Spinner = ({ isLoading, ...otherProps }) => {\r\n    return isLoading ? (\r\n      <SpinnerOverlay>\r\n        <SpinnerContainer />\r\n      </SpinnerOverlay>\r\n    ) : (\r\n      <WrappedComponent {...otherProps} />\r\n    )\r\n  }\r\n  return Spinner\r\n}\r\n\r\nexport default WithSpinner\r\n"]},"metadata":{},"sourceType":"module"}