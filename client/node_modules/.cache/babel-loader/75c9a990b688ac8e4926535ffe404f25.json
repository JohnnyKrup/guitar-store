{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\GitHub\\\\React\\\\guitar-store\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport HomePage from \"./pages/homepage.component\";\nimport { Switch, Route } from \"react-router-dom\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport Header from \"./components/header/header.component\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-up/sign-in-and-up.component\";\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\";\nimport { connect } from \"react-redux\";\nimport { setCurrentUser } from \"./redux/user/user.actions\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser\n    } = this.props;\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      // check if the user is signing in\n      if (userAuth) {\n        // if there is a document in firebase get back the userReference object\n        // if there is no document, a new entry is created in the createUserProf. function\n        // with the data from our userAuth process\n        const userRef = await createUserProfileDocument(userAuth);\n        /**\n         * create a listener on the userRef object to get notified of any changes to it\n         * we also get back the first state of that data\n         * this data from the database, we set equal to our currentUser in our app\n         * so that we can massage the data\n         */\n\n        userRef.onSnapshot(snapShot => {\n          /**\n           * the ID and the rest of the data is not stored in the same place\n           * how can we get the data of both places, with one call?\n           * get the ID from snapShot.id\n           * and as a 2nd arg spread ...snapShot.data() where all other props are\n           */\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          });\n        });\n      } else {\n        this.setState({\n          currentUser: userAuth\n        });\n      } // console.log(this.state) cannot be added here, beacuse setState is an async call\n      // this.setState({ currentUser: user })\n\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/signin\",\n      component: SignInAndSignUpPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n/**\n * This function spreads the actions of the reducers\n * i.e. setCurrentUser: user => dispatch(setCurrentUser(user))\n * this means: we call an anonymous function and pass in a user,\n * this user will be dispatched with a new setCurrentUser object\n * with that user in it\n * @param {*} dispatch\n */\n\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n/**\n * Old componentDidMount\n * before using Redux\n */\n// componentDidMount() {\n//     this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n//       // check if the user is signing in\n//       if (userAuth) {\n//         // if there is a document in firebase get back the userReference object\n//         // if there is no document, a new entry is created in the createUserProf. function\n//         // with the data from our userAuth process\n//         const userRef = await createUserProfileDocument(userAuth)\n//         /**\n//          * create a listener on the userRef object to get notified of any changes to it\n//          * we also get back the first state of that data\n//          * this data from the database, we set equal to our currentUser in our app\n//          * so that we can massage the data\n//          */\n//         userRef.onSnapshot((snapShot) => {\n//           /**\n//            * the ID and the rest of the data is not stored in the same place\n//            * how can we get the data of both places, with one call?\n//            * get the ID from snapShot.id\n//            * and as a 2nd arg spread ...snapShot.data() where all other props are\n//            */\n//           this.setState(\n//             {\n//               currentUser: { id: snapShot.id, ...snapShot.data() },\n//             },\n//             () => console.log(this.state)\n//           )\n//         })\n//       } else {\n//         this.setState({ currentUser: userAuth })\n//       }\n//       // console.log(this.state) cannot be added here, beacuse setState is an async call\n//       // this.setState({ currentUser: user })\n//     })\n//   }","map":{"version":3,"sources":["D:/Coding/GitHub/React/guitar-store/src/App.js"],"names":["React","HomePage","Switch","Route","ShopPage","Header","SignInAndSignUpPage","auth","createUserProfileDocument","connect","setCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","setState","currentUser","componentWillUnmount","render","mapDispatchToProps","dispatch","user"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,mBAAP,MAAgC,iDAAhC;AACA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,2BAAhD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,2BAA/B;;AAEA,MAAMC,GAAN,SAAkBX,KAAK,CAACY,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,mBADgC,GACV,IADU;AAAA;;AAGhCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEJ,MAAAA;AAAF,QAAqB,KAAKK,KAAhC;AAEA,SAAKF,mBAAL,GAA2BN,IAAI,CAACS,kBAAL,CAAwB,MAAOC,QAAP,IAAoB;AACrE;AACA,UAAIA,QAAJ,EAAc;AACZ;AACA;AACA;AACA,cAAMC,OAAO,GAAG,MAAMV,yBAAyB,CAACS,QAAD,CAA/C;AAEA;;;;;;;AAMAC,QAAAA,OAAO,CAACC,UAAR,CAAoBC,QAAD,IAAc;AAC/B;;;;;;AAMAV,UAAAA,cAAc,CAAC;AAAEW,YAAAA,EAAE,EAAED,QAAQ,CAACC,EAAf;AAAmB,eAAGD,QAAQ,CAACE,IAAT;AAAtB,WAAD,CAAd;AACD,SARD;AASD,OArBD,MAqBO;AACL,aAAKC,QAAL,CAAc;AAAEC,UAAAA,WAAW,EAAEP;AAAf,SAAd;AACD,OAzBoE,CA0BrE;AAEA;;AACD,KA7B0B,CAA3B;AA8BD;;AAEDQ,EAAAA,oBAAoB,GAAG;AACrB,SAAKZ,mBAAL;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eAME,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEzB,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEG,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,SAAZ;AAAsB,MAAA,SAAS,EAAEE,mBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CANF,CADF;AAcD;;AAzD+B;AA4DlC;;;;;;;;;;AAQA,MAAMqB,kBAAkB,GAAIC,QAAD,KAAe;AACxClB,EAAAA,cAAc,EAAGmB,IAAD,IAAUD,QAAQ,CAAClB,cAAc,CAACmB,IAAD,CAAf;AADM,CAAf,CAA3B;;AAIA,eAAepB,OAAO,CAAC,IAAD,EAAOkB,kBAAP,CAAP,CAAkChB,GAAlC,CAAf;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from \"react\"\nimport \"./App.css\"\nimport HomePage from \"./pages/homepage.component\"\nimport { Switch, Route } from \"react-router-dom\"\nimport ShopPage from \"./pages/shop/shop.component\"\nimport Header from \"./components/header/header.component\"\nimport SignInAndSignUpPage from \"./pages/sign-in-and-up/sign-in-and-up.component\"\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\"\nimport { connect } from \"react-redux\"\nimport { setCurrentUser } from \"./redux/user/user.actions\"\n\nclass App extends React.Component {\n  unsubscribeFromAuth = null\n\n  componentDidMount() {\n    const { setCurrentUser } = this.props\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n      // check if the user is signing in\n      if (userAuth) {\n        // if there is a document in firebase get back the userReference object\n        // if there is no document, a new entry is created in the createUserProf. function\n        // with the data from our userAuth process\n        const userRef = await createUserProfileDocument(userAuth)\n\n        /**\n         * create a listener on the userRef object to get notified of any changes to it\n         * we also get back the first state of that data\n         * this data from the database, we set equal to our currentUser in our app\n         * so that we can massage the data\n         */\n        userRef.onSnapshot((snapShot) => {\n          /**\n           * the ID and the rest of the data is not stored in the same place\n           * how can we get the data of both places, with one call?\n           * get the ID from snapShot.id\n           * and as a 2nd arg spread ...snapShot.data() where all other props are\n           */\n          setCurrentUser({ id: snapShot.id, ...snapShot.data() })\n        })\n      } else {\n        this.setState({ currentUser: userAuth })\n      }\n      // console.log(this.state) cannot be added here, beacuse setState is an async call\n\n      // this.setState({ currentUser: user })\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth()\n  }\n\n  render() {\n    return (\n      <div>\n        {/* pass in the state of the current user, \n        so that we can display if a user is signed in or not.\n        After using Redux, we do not need to pass the state of the current user anymore\n        */}\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={ShopPage} />\n          <Route path=\"/signin\" component={SignInAndSignUpPage} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\n/**\n * This function spreads the actions of the reducers\n * i.e. setCurrentUser: user => dispatch(setCurrentUser(user))\n * this means: we call an anonymous function and pass in a user,\n * this user will be dispatched with a new setCurrentUser object\n * with that user in it\n * @param {*} dispatch\n */\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentUser: (user) => dispatch(setCurrentUser(user)),\n})\n\nexport default connect(null, mapDispatchToProps)(App)\n\n/**\n * Old componentDidMount\n * before using Redux\n */\n// componentDidMount() {\n//     this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n//       // check if the user is signing in\n//       if (userAuth) {\n//         // if there is a document in firebase get back the userReference object\n//         // if there is no document, a new entry is created in the createUserProf. function\n//         // with the data from our userAuth process\n//         const userRef = await createUserProfileDocument(userAuth)\n\n//         /**\n//          * create a listener on the userRef object to get notified of any changes to it\n//          * we also get back the first state of that data\n//          * this data from the database, we set equal to our currentUser in our app\n//          * so that we can massage the data\n//          */\n//         userRef.onSnapshot((snapShot) => {\n//           /**\n//            * the ID and the rest of the data is not stored in the same place\n//            * how can we get the data of both places, with one call?\n//            * get the ID from snapShot.id\n//            * and as a 2nd arg spread ...snapShot.data() where all other props are\n//            */\n//           this.setState(\n//             {\n//               currentUser: { id: snapShot.id, ...snapShot.data() },\n//             },\n//             () => console.log(this.state)\n//           )\n//         })\n//       } else {\n//         this.setState({ currentUser: userAuth })\n//       }\n//       // console.log(this.state) cannot be added here, beacuse setState is an async call\n\n//       // this.setState({ currentUser: user })\n//     })\n//   }\n"]},"metadata":{},"sourceType":"module"}