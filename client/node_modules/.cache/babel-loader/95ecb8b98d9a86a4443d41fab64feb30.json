{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\GitHub\\\\React\\\\guitar-store\\\\src\\\\pages\\\\shop\\\\shop.component.js\";\nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../components/with-spinner/with.spinner.component\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport Collection from \"../collection/collection.component\";\nimport { firestore, convertCollcetionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionWithSpinner = WithSpinner(Collection);\n/**\r\n * we have access to the match property because in App.js\r\n * the ShopPage is <Route path=\"/shop\" component={ShopPage} /> passed as\r\n * a Component in a Route and automatically Route passes match / history / location as\r\n * properties to its component\r\n * @param {*} param0\r\n */\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    /**\r\n     * Prepare data from firebase, so that we can use it in our application\r\n     * this way we can get rid of the static data stored in the frontend\r\n     */\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection(\"collections\");\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n      // console.log(snapshot)\n      const collectionsMap = convertCollcetionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({\n        loading: false\n      });\n    });\n  } // console.log(match)\n\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      component: Collection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["D:/Coding/GitHub/React/guitar-store/src/pages/shop/shop.component.js"],"names":["React","Route","connect","updateCollections","WithSpinner","CollectionsOverview","Collection","firestore","convertCollcetionsSnapshotToMap","CollectionsOverviewWithSpinner","CollectionWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","onSnapshot","snapshot","collectionsMap","setState","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AAEA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,MAAMC,8BAA8B,GAAGL,WAAW,CAACC,mBAAD,CAAlD;AACA,MAAMK,qBAAqB,GAAGN,WAAW,CAACE,UAAD,CAAzC;AAEA;;;;;;;;AAOA,MAAMK,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAGrCC,KAHqC,GAG7B;AACNC,MAAAA,OAAO,EAAE;AADH,KAH6B;AAAA,SAOrCC,uBAPqC,GAOX,IAPW;AAAA;;AASrCC,EAAAA,iBAAiB,GAAG;AAClB;;;;AAIA,UAAM;AAAEb,MAAAA;AAAF,QAAwB,KAAKc,KAAnC;AACA,UAAMC,aAAa,GAAGX,SAAS,CAACY,UAAV,CAAqB,aAArB,CAAtB;AAEA,SAAKJ,uBAAL,GAA+BG,aAAa,CAACE,UAAd,CAC7B,MAAOC,QAAP,IAAoB;AAClB;AACA,YAAMC,cAAc,GAAGd,+BAA+B,CAACa,QAAD,CAAtD;AACAlB,MAAAA,iBAAiB,CAACmB,cAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAN4B,CAA/B;AAQD,GAzBoC,CA2BrC;;;AACAU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKR,KAAvB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEY,KAAK,CAACC,IAAK,EAFtB;AAGE,MAAA,MAAM,EAAGT,KAAD,iBACN,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEH;AAA3C,SAAwDG,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAQE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEQ,KAAK,CAACC,IAAK,gBAA3B;AAA4C,MAAA,SAAS,EAAEpB,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF;AAYD;;AA3CoC;;AA8CvC,MAAMqB,kBAAkB,GAAIC,QAAD,KAAe;AACxCzB,EAAAA,iBAAiB,EAAGmB,cAAD,IACjBM,QAAQ,CAACzB,iBAAiB,CAACmB,cAAD,CAAlB;AAF8B,CAAf,CAA3B;;AAKA,eAAepB,OAAO,CAAC,IAAD,EAAOyB,kBAAP,CAAP,CAAkChB,QAAlC,CAAf","sourcesContent":["import React from \"react\"\r\nimport { Route } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\"\r\n\r\nimport { updateCollections } from \"../../redux/shop/shop.actions\"\r\n\r\nimport WithSpinner from \"../../components/with-spinner/with.spinner.component\"\r\n\r\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\"\r\nimport Collection from \"../collection/collection.component\"\r\n\r\nimport {\r\n  firestore,\r\n  convertCollcetionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\"\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview)\r\nconst CollectionWithSpinner = WithSpinner(Collection)\r\n\r\n/**\r\n * we have access to the match property because in App.js\r\n * the ShopPage is <Route path=\"/shop\" component={ShopPage} /> passed as\r\n * a Component in a Route and automatically Route passes match / history / location as\r\n * properties to its component\r\n * @param {*} param0\r\n */\r\nclass ShopPage extends React.Component {\r\n  // this is a short version of invoking constructor(){super() state: {}}\r\n  // react will call constructor and super for us\r\n  state = {\r\n    loading: true,\r\n  }\r\n\r\n  unsubscribeFromSnapshot = null\r\n\r\n  componentDidMount() {\r\n    /**\r\n     * Prepare data from firebase, so that we can use it in our application\r\n     * this way we can get rid of the static data stored in the frontend\r\n     */\r\n    const { updateCollections } = this.props\r\n    const collectionRef = firestore.collection(\"collections\")\r\n\r\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n      async (snapshot) => {\r\n        // console.log(snapshot)\r\n        const collectionsMap = convertCollcetionsSnapshotToMap(snapshot)\r\n        updateCollections(collectionsMap)\r\n        this.setState({ loading: false })\r\n      }\r\n    )\r\n  }\r\n\r\n  // console.log(match)\r\n  render() {\r\n    const { match } = this.props\r\n    const { loading } = this.state\r\n    return (\r\n      <div className=\"shop-page\">\r\n        <Route\r\n          exact\r\n          path={`${match.path}`}\r\n          render={(props) => (\r\n            <CollectionsOverviewWithSpinner isLoading={loading} {...props} />\r\n          )}\r\n        />\r\n        <Route path={`${match.path}/:collectionId`} component={Collection} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateCollections: (collectionsMap) =>\r\n    dispatch(updateCollections(collectionsMap)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage)\r\n"]},"metadata":{},"sourceType":"module"}