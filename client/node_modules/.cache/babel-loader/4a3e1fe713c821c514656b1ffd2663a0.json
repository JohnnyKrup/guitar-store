{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport memoize from \"lodash.memoize\"; // const COLLECTION_ID_MAP = {\n//   \"konzert-gitarren\": 1000,\n//   \"flamenco-gitarren\": 2000,\n//   \"kinder-gitarren\": 3000,\n//   \"western-gitarren\": 4000,\n//   \"meister-gitarren\": 5000,\n// }\n\nconst shopSelector = state => state.shop;\n\nexport const collectionsSelector = createSelector([shopSelector], shop => shop.collections);\n/**\r\n * collectionUrlParam is a string i.e. 'western'\r\n * and we try to find the matching collection ID with the\r\n * find() function, where we get back the collection that the collection.id\r\n * macthes the numeric value of the collectionUrlParam\r\n *\r\n * Storing data in an Array is not the best solution, when your collections start\r\n * to grow. i.e. you had 1000 collections and you try to find() the last element\r\n * you would make the === compare for 999 items before you can access your collection\r\n * => storing list of data in objects rather than arrays is called: \"DataNormalization\"\r\n * @param {*} collectionUrlParam\r\n */\n\nexport const collectionSelector = memoize(collectionUrlParam => createSelector([collectionsSelector], // collections.find(\n//   (collection) => collection.id === COLLECTION_ID_MAP[collectionUrlParam]\n// )\ncollections => collections[collectionUrlParam]));","map":{"version":3,"sources":["D:/Coding/GitHub/React/guitar-store/src/redux/shop/shop.selector.js"],"names":["createSelector","memoize","shopSelector","state","shop","collectionsSelector","collections","collectionSelector","collectionUrlParam"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAAtC;;AAEA,OAAO,MAAMC,mBAAmB,GAAGL,cAAc,CAC/C,CAACE,YAAD,CAD+C,EAE9CE,IAAD,IAAUA,IAAI,CAACE,WAFgC,CAA1C;AAKP;;;;;;;;;;;;;AAYA,OAAO,MAAMC,kBAAkB,GAAGN,OAAO,CAAEO,kBAAD,IACxCR,cAAc,CACZ,CAACK,mBAAD,CADY,EAEZ;AACA;AACA;AACCC,WAAD,IAAiBA,WAAW,CAACE,kBAAD,CALhB,CADyB,CAAlC","sourcesContent":["import { createSelector } from \"reselect\"\r\nimport memoize from \"lodash.memoize\"\r\n\r\n// const COLLECTION_ID_MAP = {\r\n//   \"konzert-gitarren\": 1000,\r\n//   \"flamenco-gitarren\": 2000,\r\n//   \"kinder-gitarren\": 3000,\r\n//   \"western-gitarren\": 4000,\r\n//   \"meister-gitarren\": 5000,\r\n// }\r\n\r\nconst shopSelector = (state) => state.shop\r\n\r\nexport const collectionsSelector = createSelector(\r\n  [shopSelector],\r\n  (shop) => shop.collections\r\n)\r\n\r\n/**\r\n * collectionUrlParam is a string i.e. 'western'\r\n * and we try to find the matching collection ID with the\r\n * find() function, where we get back the collection that the collection.id\r\n * macthes the numeric value of the collectionUrlParam\r\n *\r\n * Storing data in an Array is not the best solution, when your collections start\r\n * to grow. i.e. you had 1000 collections and you try to find() the last element\r\n * you would make the === compare for 999 items before you can access your collection\r\n * => storing list of data in objects rather than arrays is called: \"DataNormalization\"\r\n * @param {*} collectionUrlParam\r\n */\r\nexport const collectionSelector = memoize((collectionUrlParam) =>\r\n  createSelector(\r\n    [collectionsSelector],\r\n    // collections.find(\r\n    //   (collection) => collection.id === COLLECTION_ID_MAP[collectionUrlParam]\r\n    // )\r\n    (collections) => collections[collectionUrlParam]\r\n  )\r\n)\r\n"]},"metadata":{},"sourceType":"module"}