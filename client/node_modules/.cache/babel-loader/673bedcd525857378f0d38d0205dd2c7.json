{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./root-reducer\";\n/**\r\n * for more information: https://redux.js.org/\r\n */\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n/**\r\n * create a redux-store, apply a middleware\r\n * and spread all properties of the [logger] array from the redux-logger\r\n * (the logger helps us debugging)\r\n * we could have written also:\r\n * const store = createStore(rootReducer, applyMiddleware(logger)\r\n * applyMiddleware will accept all possible middleWares\r\n */\n\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nexport const persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["D:/Coding/GitHub/React/guitar-store/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","rootReducer","middlewares","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA;;;;AAGA,MAAMC,WAAW,GAAG,EAApB;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CH,EAAAA,WAAW,CAACI,IAAZ,CAAiBN,MAAjB;AACD;AAED;;;;;;;;;;AAQA,OAAO,MAAMO,KAAK,GAAGV,WAAW,CAACI,WAAD,EAAcH,eAAe,CAAC,GAAGI,WAAJ,CAA7B,CAAzB;AAEP,OAAO,MAAMM,SAAS,GAAGT,YAAY,CAACQ,KAAD,CAA9B;AAEP,eAAe;AAAEA,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\"\r\nimport { persistStore } from \"redux-persist\"\r\nimport logger from \"redux-logger\"\r\n\r\nimport rootReducer from \"./root-reducer\"\r\n\r\n/**\r\n * for more information: https://redux.js.org/\r\n */\r\nconst middlewares = []\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middlewares.push(logger)\r\n}\r\n\r\n/**\r\n * create a redux-store, apply a middleware\r\n * and spread all properties of the [logger] array from the redux-logger\r\n * (the logger helps us debugging)\r\n * we could have written also:\r\n * const store = createStore(rootReducer, applyMiddleware(logger)\r\n * applyMiddleware will accept all possible middleWares\r\n */\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares))\r\n\r\nexport const persistor = persistStore(store)\r\n\r\nexport default { store, persistor }\r\n"]},"metadata":{},"sourceType":"module"}