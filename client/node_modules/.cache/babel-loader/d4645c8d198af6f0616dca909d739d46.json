{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\GitHub\\\\React\\\\guitar-store\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport \"./App.css\";\nimport HomePage from \"./pages/homepage.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport Header from \"./components/header/header.component\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-up/sign-in-and-up.component\";\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\";\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { selectCurrentUser } from \"./redux/user/user.selectors\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser\n    } = this.props;\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      // check if the user is signing in\n      if (userAuth) {\n        // if there is a document in firebase get back the userReference object\n        // if there is no document, a new entry is created in the createUserProf. function\n        // with the data from our userAuth process\n        const userRef = await createUserProfileDocument(userAuth);\n        /**\n         * create a listener on the userRef object to get notified of any changes to it\n         * we also get back the first state of that data\n         * this data from the database, we set equal to our currentUser in our app\n         * so that we can massage the data\n         */\n\n        userRef.onSnapshot(snapShot => {\n          /**\n           * the ID and the rest of the data is not stored in the same place\n           * how can we get the data of both places, with one call?\n           * get the ID from snapShot.id\n           * and as a 2nd arg spread ...snapShot.data() where all other props are\n           */\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          });\n        });\n      } else {\n        setCurrentUser(userAuth);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }) : /*#__PURE__*/React.createElement(SignInAndSignUpPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n/**\n * Thnaks to this function, we have access to:\n * this.props.currentUser\n * @param {*} param0\n */\n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n});\n/**\n * This function spreads the actions of the reducers\n * i.e. setCurrentUser: user => dispatch(setCurrentUser(user))\n * this means: we call an anonymous function and pass in a user,\n * this user will be dispatched with a new setCurrentUser object\n * with that user in it\n * @param {*} dispatch\n */\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["D:/Coding/GitHub/React/guitar-store/src/App.js"],"names":["React","Switch","Route","Redirect","connect","createStructuredSelector","HomePage","ShopPage","Header","SignInAndSignUpPage","auth","createUserProfileDocument","setCurrentUser","selectCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { Switch, Route, Redirect } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\nimport { createStructuredSelector } from \"reselect\"\n\nimport \"./App.css\"\n\nimport HomePage from \"./pages/homepage.component\"\nimport ShopPage from \"./pages/shop/shop.component\"\nimport Header from \"./components/header/header.component\"\nimport SignInAndSignUpPage from \"./pages/sign-in-and-up/sign-in-and-up.component\"\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\"\nimport { setCurrentUser } from \"./redux/user/user.actions\"\nimport { selectCurrentUser } from \"./redux/user/user.selectors\"\n\nclass App extends React.Component {\n  unsubscribeFromAuth = null\n\n  componentDidMount() {\n    const { setCurrentUser } = this.props\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n      // check if the user is signing in\n      if (userAuth) {\n        // if there is a document in firebase get back the userReference object\n        // if there is no document, a new entry is created in the createUserProf. function\n        // with the data from our userAuth process\n        const userRef = await createUserProfileDocument(userAuth)\n\n        /**\n         * create a listener on the userRef object to get notified of any changes to it\n         * we also get back the first state of that data\n         * this data from the database, we set equal to our currentUser in our app\n         * so that we can massage the data\n         */\n        userRef.onSnapshot((snapShot) => {\n          /**\n           * the ID and the rest of the data is not stored in the same place\n           * how can we get the data of both places, with one call?\n           * get the ID from snapShot.id\n           * and as a 2nd arg spread ...snapShot.data() where all other props are\n           */\n          setCurrentUser({ id: snapShot.id, ...snapShot.data() })\n        })\n      } else {\n        setCurrentUser(userAuth)\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth()\n  }\n\n  render() {\n    return (\n      <div>\n        {/* pass in the state of the current user, \n        so that we can display if a user is signed in or not.\n        After using Redux, we do not need to pass the state of the current user anymore\n        */}\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={ShopPage} />\n          {/**\n           * instead of component={SignInAndSignUpPage}\n           * we want to use the render={} prop, so that we can set up\n           * that signed in users, will be redirected to the homepage\n           * and cannot mess around with the signin page\n           */}\n          <Route\n            exact\n            path=\"/signin\"\n            render={() =>\n              this.props.currentUser ? (\n                <Redirect to=\"/\" />\n              ) : (\n                <SignInAndSignUpPage />\n              )\n            }\n          />\n        </Switch>\n      </div>\n    )\n  }\n}\n\n/**\n * Thnaks to this function, we have access to:\n * this.props.currentUser\n * @param {*} param0\n */\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n})\n\n/**\n * This function spreads the actions of the reducers\n * i.e. setCurrentUser: user => dispatch(setCurrentUser(user))\n * this means: we call an anonymous function and pass in a user,\n * this user will be dispatched with a new setCurrentUser object\n * with that user in it\n * @param {*} dispatch\n */\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentUser: (user) => dispatch(setCurrentUser(user)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n"]},"metadata":{},"sourceType":"module"}