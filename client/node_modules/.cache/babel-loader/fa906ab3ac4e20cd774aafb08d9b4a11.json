{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/analytics\"; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBzwIgq2EN0x97xsz4vnww4HEyKrmTS__g\",\n  authDomain: \"gtar-db.firebaseapp.com\",\n  databaseURL: \"https://gtar-db.firebaseio.com\",\n  projectId: \"gtar-db\",\n  storageBucket: \"gtar-db.appspot.com\",\n  messagingSenderId: \"896629947935\",\n  appId: \"1:896629947935:web:d39368e812d9873ba91f2a\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n/**\r\n * QueryReference Objects do not hold the data, they have properties that tell us details about it,\r\n * or the method to get the Snapshot Object which gives us the data we are looking for.\r\n *\r\n * QueryReference === Info\r\n * QuerySnapshot === data\r\n *\r\n * CRUD (Create / Retrieve / Update / Delete) operations can be done only on the reference object\r\n * not the snapshot.\r\n *\r\n * userAuth will return 'null' if you are not signedIn\r\n *\r\n * @param {*} userAuth\r\n * @param {*} additionalData\r\n */\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // get the refernce of the data\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // get the real data\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  } // console.log(userRef)\n\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // console.log(collectionRef)\n\n  /**\r\n   * Firebase can execute only 1 .set() action at the time\r\n   * therefore, we create one big batch request, to make sure\r\n   * that all our chained requests are 100% functional.\r\n   * This way we are also able to execute more than one command at the time.\r\n   */\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); // console.log(newDocRef)\n\n    batch.set(newDocRef, obj);\n  }); // batch.commit() returns a promise\n\n  return await batch.commit();\n};\nexport const convertCollcetionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); // console.log(transformedCollection)\n\n  /**\r\n   * We pass in our inital object (an empty object, as 2nd arg) {}\r\n   * the first key in our object will be konzert and the value will be the konzertCollection\r\n   * this will be added to the transformedCollection,\r\n   * then the accumulator will repeat that step going through every item in the collection\r\n   * returning an object with key value pairs\r\n   */\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider).catch(error => {\n  console.log(error);\n});\nexport default firebase;\n/**\r\n * HOW TO ACCESS FIRESTORE DATA\r\n *\r\n * import firebase from \"firebase/app\"\r\n * import \"firebase/firestore\"\r\n *\r\n * const firestore = firebase.firestore()\r\n *\r\n * There are 2 ways to access the data with chained .collection() & .doc() functions or\r\n * with a complete path (string) inside a .collection() or .doc() function\r\n * The next 2 lines mean the same\r\n * firestore.collection(\"users\").doc(\"ZCYotcmUQHAELJR5MFV7\").collection(\"cartItems\").doc(\"JA60QXUOrLeQtv0QKoZ4\")\r\n * firestore.doc(\"users/ZCYotcmUQHAELJR5MFV7/cartItems/JA60QXUOrLeQtv0QKoZ4\")\r\n *\r\n * if you want a collection instead of a specifc item\r\n * firestore.collection(\"users/ZCYotcmUQHAELJR5MFV7/cartItems\")\r\n */","map":{"version":3,"sources":["D:/Coding/GitHub/React/guitar-store/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollcetionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","catch"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/firestore\"\r\nimport \"firebase/auth\"\r\nimport \"firebase/analytics\"\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBzwIgq2EN0x97xsz4vnww4HEyKrmTS__g\",\r\n  authDomain: \"gtar-db.firebaseapp.com\",\r\n  databaseURL: \"https://gtar-db.firebaseio.com\",\r\n  projectId: \"gtar-db\",\r\n  storageBucket: \"gtar-db.appspot.com\",\r\n  messagingSenderId: \"896629947935\",\r\n  appId: \"1:896629947935:web:d39368e812d9873ba91f2a\",\r\n}\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const auth = firebase.auth()\r\nexport const firestore = firebase.firestore()\r\n\r\n/**\r\n * QueryReference Objects do not hold the data, they have properties that tell us details about it,\r\n * or the method to get the Snapshot Object which gives us the data we are looking for.\r\n *\r\n * QueryReference === Info\r\n * QuerySnapshot === data\r\n *\r\n * CRUD (Create / Retrieve / Update / Delete) operations can be done only on the reference object\r\n * not the snapshot.\r\n *\r\n * userAuth will return 'null' if you are not signedIn\r\n *\r\n * @param {*} userAuth\r\n * @param {*} additionalData\r\n */\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return\r\n\r\n  // get the refernce of the data\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\r\n  // get the real data\r\n  const snapShot = await userRef.get()\r\n\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth\r\n    const createdAt = new Date()\r\n\r\n    try {\r\n      await userRef.set({ displayName, email, createdAt, ...additionalData })\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message)\r\n    }\r\n  }\r\n\r\n  // console.log(userRef)\r\n  return userRef\r\n}\r\n\r\nexport const addCollectionAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd\r\n) => {\r\n  const collectionRef = firestore.collection(collectionKey)\r\n  // console.log(collectionRef)\r\n\r\n  /**\r\n   * Firebase can execute only 1 .set() action at the time\r\n   * therefore, we create one big batch request, to make sure\r\n   * that all our chained requests are 100% functional.\r\n   * This way we are also able to execute more than one command at the time.\r\n   */\r\n  const batch = firestore.batch()\r\n  objectsToAdd.forEach((obj) => {\r\n    const newDocRef = collectionRef.doc()\r\n    // console.log(newDocRef)\r\n    batch.set(newDocRef, obj)\r\n  })\r\n\r\n  // batch.commit() returns a promise\r\n  return await batch.commit()\r\n}\r\n\r\nexport const convertCollcetionsSnapshotToMap = (collections) => {\r\n  const transformedCollection = collections.docs.map((doc) => {\r\n    const { title, items } = doc.data()\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items,\r\n    }\r\n  })\r\n  // console.log(transformedCollection)\r\n\r\n  /**\r\n   * We pass in our inital object (an empty object, as 2nd arg) {}\r\n   * the first key in our object will be konzert and the value will be the konzertCollection\r\n   * this will be added to the transformedCollection,\r\n   * then the accumulator will repeat that step going through every item in the collection\r\n   * returning an object with key value pairs\r\n   */\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection\r\n    return accumulator\r\n  }, {})\r\n}\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\nprovider.setCustomParameters({ prompt: \"select_account\" })\r\n\r\nexport const signInWithGoogle = () =>\r\n  auth.signInWithPopup(provider).catch((error) => {\r\n    console.log(error)\r\n  })\r\n\r\nexport default firebase\r\n\r\n/**\r\n * HOW TO ACCESS FIRESTORE DATA\r\n *\r\n * import firebase from \"firebase/app\"\r\n * import \"firebase/firestore\"\r\n *\r\n * const firestore = firebase.firestore()\r\n *\r\n * There are 2 ways to access the data with chained .collection() & .doc() functions or\r\n * with a complete path (string) inside a .collection() or .doc() function\r\n * The next 2 lines mean the same\r\n * firestore.collection(\"users\").doc(\"ZCYotcmUQHAELJR5MFV7\").collection(\"cartItems\").doc(\"JA60QXUOrLeQtv0QKoZ4\")\r\n * firestore.doc(\"users/ZCYotcmUQHAELJR5MFV7/cartItems/JA60QXUOrLeQtv0QKoZ4\")\r\n *\r\n * if you want a collection instead of a specifc item\r\n * firestore.collection(\"users/ZCYotcmUQHAELJR5MFV7/cartItems\")\r\n */\r\n"]},"metadata":{},"sourceType":"module"}